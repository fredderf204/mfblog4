<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Functions on MF Azure Blog</title><link>https://mfblog.au/tags/azure-functions/</link><description>Recent content in Azure Functions on MF Azure Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Nov 2023 15:46:04 +1100</lastBuildDate><atom:link href="https://mfblog.au/tags/azure-functions/index.xml" rel="self" type="application/rss+xml"/><item><title>AI Generated Azure News Summary</title><link>https://mfblog.au/p/ai-generated-azure-news-summary/</link><pubDate>Fri, 24 Nov 2023 15:46:04 +1100</pubDate><guid>https://mfblog.au/p/ai-generated-azure-news-summary/</guid><description>&lt;img src="https://mfblog.au/p/ai-generated-azure-news-summary/cover.jpg" alt="Featured image of post AI Generated Azure News Summary" />&lt;p>Are you trying to keep up with all of the daily Azure news? Are you finding it difficult and overwhelming? Well, I do ðŸ˜­ but I have a solution for you ðŸ˜Ž I&amp;rsquo;ve created an Azure Function centred process that takes news articles from places like &lt;a class="link" href="https://azurefeeds.com/" target="_blank" rel="noopener"
>Azure Feeds&lt;/a> and creates a summary of them using &lt;a class="link" href="https://azure.microsoft.com/en-us/products/ai-services/openai-service" target="_blank" rel="noopener"
>Azure Open AI&lt;/a>.&lt;/p>
&lt;h2 id="tldr">TLDR
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/fredderf204/ai-gen-news-summary" target="_blank" rel="noopener"
>GitHub Repo&lt;/a>&lt;/li>
&lt;li>Why I created this&lt;/li>
&lt;li>How it works&lt;/li>
&lt;li>How to use it&lt;/li>
&lt;li>What&amp;rsquo;s next&lt;/li>
&lt;/ul>
&lt;h2 id="github-repo">GitHub Repo
&lt;/h2>&lt;p>The code for this project can be found &lt;a class="link" href="https://github.com/fredderf204/ai-gen-news-summary" target="_blank" rel="noopener"
>here&lt;/a>. Feel free to fork it and make it your own. Or if you have any issues with the code or have any suggestions, please raise an issue âœŠ&lt;/p>
&lt;h2 id="why-i-created-this">Why I created this
&lt;/h2>&lt;p>I created this project for a few reasons:&lt;/p>
&lt;ol>
&lt;li>I find it very difficult to keep up with all of the Azure news. There is so much of it and it&amp;rsquo;s coming from so many different places. I wanted to create a way to summarise all of the news into one place.&lt;/li>
&lt;li>I wanted a baseline of what has happened in the Azure world over the last 24 hours, but I wanted a system where if I saw something that was interesting, I could go and read the full article.&lt;/li>
&lt;li>I wanted a use case to build something with &lt;a class="link" href="https://azure.microsoft.com/en-us/products/ai-services/openai-service" target="_blank" rel="noopener"
>Azure Open AI&lt;/a>. I find this is the best way for me to learn something new.&lt;/li>
&lt;/ol>
&lt;h2 id="how-it-works">How it works
&lt;/h2>&lt;p>&lt;img src="https://mfblog.au/p/ai-generated-azure-news-summary/1.jpg"
width="1020"
height="430"
srcset="https://mfblog.au/p/ai-generated-azure-news-summary/1_hu2443003054369718378.jpg 480w, https://mfblog.au/p/ai-generated-azure-news-summary/1_hu14989232358585409609.jpg 1024w"
loading="lazy"
alt="Overview"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="569px"
>&lt;/p>
&lt;ol>
&lt;li>I have an Azure Function that runs every 24 hours on a timer trigger called mf-az-feeds. It gets the latest news articles from &lt;a class="link" href="https://azurefeeds.com/" target="_blank" rel="noopener"
>Azure Feeds&lt;/a> using RSS and sends a JSON message to an Azure storage queue. The JSON contains fields like; title, description, link, and published date.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Huge shout out to &lt;a class="link" href="https://azurefeeds.com/" target="_blank" rel="noopener"
>Azure Feeds&lt;/a> as it&amp;rsquo;s the place I have been getting my Azure news daily for many years!&lt;/li>
&lt;li>This process could be scaled to get news from other sources as diagramed, but I haven&amp;rsquo;t done that yet.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>The queueworker Azure Function reads each JSON message of the storage queue (queue trigger) and then uses &lt;a class="link" href="https://azure.microsoft.com/en-us/products/ai-services/openai-service" target="_blank" rel="noopener"
>Azure Open AI&lt;/a> to create a summary of each article. Then the summary is combined with the JSON contains fields of title, description, link, and published date and stored in BLOB storage as JSON.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>I choose this process because I wanted a copy of the JSON and BLOB storage is cheap!&lt;/li>
&lt;li>Each day has it&amp;rsquo;s own container and each article has it&amp;rsquo;s own JSON file.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>The html-email function has a time trigger that run every 24 hours (and 20 minutes after the mf-az-feeds function) and gets the JSON from BLOB storage and creates a HTML file. I store a copy of the html file in the days storage container and a copy in to the static website folder ($web) in Azure Storage. Then the function sends a REST request to my Logic App with the static website folder url, which in turn gets emailed to me.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>I haven&amp;rsquo;t documented the static website folder ($web) copy in the above diagram, but it&amp;rsquo;s there. And so I can go the same URL each day, and it will be up to date with a AI generated summary of the Azure news for that day.&lt;/li>
&lt;/ul>
&lt;p>For example, this is what today&amp;rsquo;s webpage looks like;&lt;/p>
&lt;p>&lt;img src="https://mfblog.au/p/ai-generated-azure-news-summary/2.jpg"
width="1332"
height="795"
srcset="https://mfblog.au/p/ai-generated-azure-news-summary/2_hu1915818496610495547.jpg 480w, https://mfblog.au/p/ai-generated-azure-news-summary/2_hu6687987534967784023.jpg 1024w"
loading="lazy"
alt="Today&amp;rsquo;s Azure News Summary"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;h2 id="how-to-use-it">How to use it
&lt;/h2>&lt;h3 id="prerequisites">Prerequisites
&lt;/h3>&lt;ul>
&lt;li>Azure subscription&lt;/li>
&lt;li>Azure Function App
&lt;ul>
&lt;li>Add the below Function App Configuration Application settings once known.
&lt;ul>
&lt;li>&amp;ldquo;targetrss&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;logicappurl&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;containerurl&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;storageaccount&amp;rdquo;: &amp;ldquo;&amp;rdquo;, &amp;lt;&amp;mdash;this is the connection string of your storage account.&lt;/li>
&lt;li>&amp;ldquo;aoaiendpoint&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;aoaikey&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;aoaimodel&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;/li>
&lt;li>&amp;ldquo;queuename&amp;rdquo;: &amp;ldquo;rssprocess&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;staticurl&amp;rdquo;: &amp;quot;&amp;quot; &amp;lt;&amp;mdash;this is the static website URL of your storage account.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Azure Storage Account
&lt;ul>
&lt;li>Blob Storage Container (remember the url path to this container.&lt;/li>
&lt;li>Static website hosting enabled (remember this URL)&lt;/li>
&lt;li>SAS Key (remember the key)&lt;/li>
&lt;li>Queue with name rssprocess (this is hardcoded in the queueworker function.json)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Azure Open AI resource (remember the endpoint name, key and model name.)&lt;/li>
&lt;li>Azure Logic App (remember the URL)&lt;/li>
&lt;/ul>
&lt;h3 id="deploy-the-azure-function-app">Deploy the Azure Function App
&lt;/h3>&lt;p>Below are the steps to deploy the Azure Function App to your Azure subscription from your local machine. I know this is the best way to do this, but I haven&amp;rsquo;t had time to create an ARM template yet. If you want to create an ARM template, please raise a PR âœŠ&lt;/p>
&lt;ol>
&lt;li>Clone the repo&lt;/li>
&lt;li>Open the repo in VS Code&lt;/li>
&lt;li>Make a Python virtual environment&lt;/li>
&lt;li>Install the requirements.txt&lt;/li>
&lt;li>Create a local.settings.json file and add the below settings. (This step isn&amp;rsquo;t required if you are deploying to Azure, but if you ever want to debug it locally, it will be.)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;IsEncrypted&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Values&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;AzureWebJobsStorage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;FUNCTIONS_WORKER_RUNTIME&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;targetrss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;logicappurl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;containerurl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;storageaccount&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;aoaiendpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;aoaikey&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;aoaimodel&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;queuename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;rssprocess&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;staticurl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>Deploy the Azure Function App to your Azure subscription using the Azure Functions extension in VS Code.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://mfblog.au/p/ai-generated-azure-news-summary/3.jpg"
width="547"
height="704"
srcset="https://mfblog.au/p/ai-generated-azure-news-summary/3_hu14544581979667487216.jpg 480w, https://mfblog.au/p/ai-generated-azure-news-summary/3_hu13542371825130102691.jpg 1024w"
loading="lazy"
alt="Deploy Azure Function App"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="186px"
>&lt;/p>
&lt;blockquote>
&lt;p>ðŸ’¡Tip: I also like to have the function locally because I can then use the Azure extension in VS Code to run the function in Azure. In case something is wrong or borken and it needs a manual trigger.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://mfblog.au/p/ai-generated-azure-news-summary/4.jpg"
width="822"
height="637"
srcset="https://mfblog.au/p/ai-generated-azure-news-summary/4_hu7469459616489470101.jpg 480w, https://mfblog.au/p/ai-generated-azure-news-summary/4_hu16637953448469587256.jpg 1024w"
loading="lazy"
alt="Trigger Azure Function"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="309px"
>&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next
&lt;/h2>&lt;p>I have a few ideas on what I want to do next with this project. I&amp;rsquo;m not sure which one I will do first, but I will do them all eventually. Add a comment below if you have any suggestions or want to help out âœŠ&lt;/p></description></item><item><title>Running Azure Functions locally</title><link>https://mfblog.au/p/running-azure-functions-locally/</link><pubDate>Mon, 13 Nov 2023 16:44:06 +1100</pubDate><guid>https://mfblog.au/p/running-azure-functions-locally/</guid><description>&lt;img src="https://mfblog.au/p/running-azure-functions-locally/cover.jpg" alt="Featured image of post Running Azure Functions locally" />&lt;p>Running Azure Functions locally isn&amp;rsquo;t something new, but it&amp;rsquo;s being a while since I&amp;rsquo;ve done it and I thought I&amp;rsquo;d share my experiences with some of the new tools, using Python and triggering local functions using time and queue triggers.&lt;/p>
&lt;h2 id="tldr">TLDR
&lt;/h2>&lt;ul>
&lt;li>Use Visual Studio Code&lt;/li>
&lt;li>Install the Azure Functions extension&lt;/li>
&lt;li>Install the Azure Functions Core Tools&lt;/li>
&lt;li>Install the Azurite&lt;/li>
&lt;li>Install the Azure Storage Explorer&lt;/li>
&lt;/ul>
&lt;h2 id="vs-code">VS Code
&lt;/h2>&lt;p>If you are developing Azure functions locally, I couldn&amp;rsquo;t recommend &lt;a class="link" href="https://code.visualstudio.com/" target="_blank" rel="noopener"
>Visual Studio Code&lt;/a> enough. It&amp;rsquo;s a great editor and has a lot of great extensions that make developing Azure Functions locally a breeze. Also it&amp;rsquo;s free and available on your favourite platform - Linux, macOS, and Windows.&lt;/p>
&lt;h2 id="developing-functions-locally">Developing Functions locally
&lt;/h2>&lt;p>There is already a great article &lt;a class="link" href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-develop-vs-code?tabs=node-v3%2Cpython-v2%2Cisolated-process&amp;amp;pivots=programming-language-python" target="_blank" rel="noopener"
>here&lt;/a> on how to develop Azure Functions by using Visual Studio Code.&lt;/p>
&lt;p>The Azure Functions extension provides these benefits:&lt;/p>
&lt;ul>
&lt;li>Edit, build, and run functions on your local development computer.&lt;/li>
&lt;li>Publish your Azure Functions project directly to Azure.&lt;/li>
&lt;li>Write your functions in various languages while taking advantage of the benefits of Visual Studio Code.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ðŸ’Ž But to develop Azure Functions locally, you must install the &lt;a class="link" href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local" target="_blank" rel="noopener"
>Azure Functions Core Tools&lt;/a> which enables an integrated local debugging experience. When using the Azure Functions extension, the easiest way to install Core Tools is by running the &lt;code>Azure Functions: Install or Update Azure Functions Core Tools&lt;/code> command from the command pallet.&lt;/p>
&lt;/blockquote>
&lt;h2 id="python">Python
&lt;/h2>&lt;p>There isn&amp;rsquo;t anything in particular you need to do make Python work with Azure Functions, but I couldn&amp;rsquo;t recommend enough creating a virtual environment and using the same Python version that Azure Functions use in Azure. This will help with any issues you may have with dependencies once you deploy your Function to Azure.&lt;/p>
&lt;h2 id="local-debugging">Local debugging
&lt;/h2>&lt;p>I can&amp;rsquo;t believe that I wasn&amp;rsquo;t doing this from the start. The first few times I would right my Azure Function locally, deploy it to Azure and wait and see if it worked.&lt;/p>
&lt;blockquote>
&lt;p>ðŸ’Ž This is a terrible idea and slowed down my development significantly. Once I started to debug locally, I was able to do so much more in a shorter amount of time.&lt;/p>
&lt;/blockquote>
&lt;h2 id="what-the-heck-is-azurite">What the heck is Azurite?
&lt;/h2>&lt;p>Have you ever wanted to run and debug your function locally, but your Azure Function needs to interact with Azure Storage?&lt;/p>
&lt;p>&lt;a class="link" href="https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=visual-studio" target="_blank" rel="noopener"
>Azurite&lt;/a> is a great tool that provides a local Azure Storage emulator that emulates the Azure Blob, Queue, and Table services for local development purposes. It is the best way to test your Azure Storage code without going to Azure.&lt;/p>
&lt;p>For instance, one of my Azure Functions had to write to Azure Blob storage. Azurite come in super handy as it can emulate Azure Blob storage locally. But what I did notice was that Azurite would validate my request to Azure Blob storage, but would not actually create the container and Blob object. But for me, having the request validated is good enough for development.&lt;/p>
&lt;p>Also starting the Azurite emulator is super easy. Once install via a VSCode extension, look at the bottom of VSCode and you should see some button that look like this&lt;/p>
&lt;p>&lt;img src="https://mfblog.au/p/running-azure-functions-locally/1.jpg"
width="981"
height="121"
srcset="https://mfblog.au/p/running-azure-functions-locally/1_hu14315052300929959907.jpg 480w, https://mfblog.au/p/running-azure-functions-locally/1_hu1475920295758090139.jpg 1024w"
loading="lazy"
alt="Azurite"
class="gallery-image"
data-flex-grow="810"
data-flex-basis="1945px"
>&lt;/p>
&lt;p>You simply click on one of those services to start them up.&lt;/p>
&lt;p>&lt;img src="https://mfblog.au/p/running-azure-functions-locally/2.jpg"
width="969"
height="128"
srcset="https://mfblog.au/p/running-azure-functions-locally/2_hu10024019013587252566.jpg 480w, https://mfblog.au/p/running-azure-functions-locally/2_hu15445313313346213980.jpg 1024w"
loading="lazy"
alt="Azurite"
class="gallery-image"
data-flex-grow="757"
data-flex-basis="1816px"
>&lt;/p>
&lt;p>Speaking of development, Azurite can be run as a docker container, so I can imagine how that could be automated and added to a CI/CD pipeline. This way you can test your app in a pipeline before deploying to Azure, speeding up development ans shortening the dev cycle.&lt;/p>
&lt;h2 id="how-to-trigger-functions-locally">How to trigger functions locally
&lt;/h2>&lt;p>Next challenge I faced was how to do trigger these functions locally? One function was setup on a time trigger to run once per day, and the other had a Azure queue trigger.&lt;/p>
&lt;h3 id="time-trigger">Time trigger
&lt;/h3>&lt;p>I struggled to find the answer to this on ðŸ˜ž but buried deep in the comments in this &lt;a class="link" href="https://stackoverflow.com/questions/46556621/what-is-the-simplest-way-to-run-a-timer-triggered-azure-function-locally-once" target="_blank" rel="noopener"
>thread&lt;/a> I found the answer.&lt;/p>
&lt;blockquote>
&lt;p>ðŸ’Ž You have to send a POST request to the local admin endpoint &lt;code>http://localhost:{port}/admin/functions/{function_name}&lt;/code> with &lt;code>Content-Type = application/json&lt;/code> and body of &lt;code>{ &amp;quot;input&amp;quot;: null }&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://mfblog.au/p/running-azure-functions-locally/3.jpg"
width="1491"
height="552"
srcset="https://mfblog.au/p/running-azure-functions-locally/3_hu17351698946429195242.jpg 480w, https://mfblog.au/p/running-azure-functions-locally/3_hu10135545029362095198.jpg 1024w"
loading="lazy"
alt="Postman"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="648px"
>&lt;/p>
&lt;p>As you can see above I used Postman to send a POST request to the local admin endpoint of &lt;code>http://localhost:7071/admin/functions/mf-az-feeds&lt;/code>. Also please not that &lt;code>{ &amp;quot;input&amp;quot;: null }&lt;/code> was the only body data that triggered the function. If I sent any other value for the input, the function would not trigger.&lt;/p>
&lt;h3 id="queue-trigger">Queue trigger
&lt;/h3>&lt;p>This was slightly simpler, but requires 3 pre-reqs&lt;/p>
&lt;ul>
&lt;li>Installing &lt;a class="link" href="https://azure.microsoft.com/en-us/products/storage/storage-explorer/" target="_blank" rel="noopener"
>Azure Storage Explorer&lt;/a>.&lt;/li>
&lt;li>Starting up the Azurite queue service in Visual Studio Code.&lt;/li>
&lt;li>The local.settings.json file on your Function project needs to have the following well-known account and key &lt;code>&amp;quot;storageaccount&amp;quot;: &amp;quot;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;&amp;quot;,&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://mfblog.au/p/running-azure-functions-locally/4.jpg"
width="539"
height="558"
srcset="https://mfblog.au/p/running-azure-functions-locally/4_hu6276408721161633132.jpg 480w, https://mfblog.au/p/running-azure-functions-locally/4_hu14084156098066710254.jpg 1024w"
loading="lazy"
alt="Azure Storage Explorer"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>Then I used the Azure Storage Explorer to connect to the local Azurite queue service and crate a new queue with the same name as my queue trigger. Next I dropped a message in that queue, which triggered the function.&lt;/p>
&lt;p>&lt;img src="https://mfblog.au/p/running-azure-functions-locally/5.jpg"
width="1086"
height="815"
srcset="https://mfblog.au/p/running-azure-functions-locally/5_hu16913575210007832731.jpg 480w, https://mfblog.au/p/running-azure-functions-locally/5_hu5359357807391461271.jpg 1024w"
loading="lazy"
alt="Azure Storage Explorer"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>I hope this helps you with your local Azure Function development. I know it helped me and I&amp;rsquo;m sure I&amp;rsquo;ll be using these tools again in the future.&lt;/p>
&lt;p>I hope you found this post useful. If you have any questions, feel free to reach out to me on &lt;a class="link" href="https://twitter.com/fredderf204" target="_blank" rel="noopener"
>Twitter&lt;/a> or &lt;a class="link" href="https://www.linkedin.com/in/1michaelfriedrich/" target="_blank" rel="noopener"
>Linkedin&lt;/a>.&lt;/p></description></item></channel></rss>